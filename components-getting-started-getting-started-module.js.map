{"version":3,"sources":["webpack:///./src/app/components/+getting-started/getting-started.doc.md","webpack:///./src/app/components/+getting-started/getting-started-routing.module.ts","webpack:///./src/app/components/+getting-started/getting-started.component.ts","webpack:///./src/app/components/+getting-started/getting-started.module.ts"],"names":[],"mappings":";;;;;;;;;AAAA,o/F;;;;;;;;;;;;;;;;;;;ACAyC;AACc;AACe;AAEtE,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kFAAuB;KACnC;CACF,CAAC;AAMF;IAAA;IAA2C,CAAC;IAA/B,2BAA2B;QAJvC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,2BAA2B,CAAI;IAAD,kCAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;ACfE;AAM1C;IAGE;QAFA,WAAM,GAAW,mBAAO,CAAC,6IAAuC,CAAC,CAAC;IAGlE,CAAC;IAJU,uBAAuB;QAJnC,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,QAAQ,EAAE,mDAAiD;SAC5D,CAAC;;OACW,uBAAuB,CAKnC;IAAD,8BAAC;CAAA;AALmC;;;;;;;;;;;;;;;;;;;;;;ACNK;AACM;AAEgC;AACT;AACC;AAYvE;IAAA;IAAoC,CAAC;IAAxB,oBAAoB;QAVhC,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,kFAAuB;aACxB;YACD,OAAO,EAAE;gBACP,4DAAY;gBACZ,2FAA2B;gBAC3B,+EAAc;aACf;SACF,CAAC;OACW,oBAAoB,CAAI;IAAD,2BAAC;CAAA;AAAJ","file":"components-getting-started-getting-started-module.js","sourcesContent":["module.exports = \"# Getting started\\n\\nIn this section we'll cover basics of the MetaUI rules framework `@ngx-metaui/rules` to assemble user interface on the fly without templates.\\n \\n\\n### Prerequisites\\n+ Knowledge of typescript \\n+ Basic Web development\\n+ Angular 7.x\\n\\n_Continuing without prior knowledge of all above is not recomended_ and result is unknown.\\n\\n----\\n\\n## Quickstart \\n\\nTo get everything up and running run following commands:\\n\\n#### Step 1\\n\\nCreate new angular application (unless you are integrating it with existing one)\\n```\\n  ng new MyDetailPage --style=scss\\n```\\n\\n\\n#### Step 2\\n\\nAdd `@ngx-metaui/rules` to your app\\n```\\n  cd MyDetailPage/\\n  ng add @ngx-metaui/rules --uiLib=\\\"prime-ng\\\"\\n```\\n\\nOnce finished you are fully configured to start some rule driven development but we skip ahead generate some ready to use page!\\nThe `--uiLib=\\\"prime-ng\\\"`  switch pre-configures UI Library to be used with the MetaUI. Even we currently support only `PrimeNg`\\nthe `Material 2` library is somethign we are working on right now...\\n\\n\\n\\n#### Step 3\\n\\nCreate `UserDetail` page with different page modes:  `Create`, `Edit` and `View`  Even this does't do much it will show  \\nbasic aspects of _MetaUI_.\\n\\n```\\nng g  @ngx-metaui/rules:mPage --modelClass=User --name=UserDetail \\n```\\nand follow instructions printed in console such as `compile oss rules` _(We will get to this)_:\\n\\n```\\nnpm run compile:oss\\n```\\n\\n### Step 4\\n\\nEither attach created page into your router or like in our case  we will simply replace the out of box \\n_welcome_ content of the  `app.component.html` with this line\\n\\n```\\n<app-user-detail></app-user-detail>\\n```\\n\\n### Step 5\\n\\nRun the application \\n\\n```\\nng serve\\n```\\nand access the page [http://localhost:4200][2] and you just created a page which is based on rules.\\n\\n\\n\\n#### Let's Recap what just happened and what was created: \\n\\n*  `/model/user.ts` to represent our domain object\\n*  Component `UserDetailComponent` with just 3 main lines to generate whole content and 3 buttons to switch between `Create`, `Edit` and `View` \\nmodes\\n* A Rule file `User.oss` ( _OSS - Object style sheet_ ) to style how the object should be rendered and behave for different situations\\n\\n![alt text](https://raw.githubusercontent.com/ngx-meta/rules/master/docs/meta/getting-started-1.1.png \\\"Generate MetaUI Application\\\")\\n\\nThe page should look like this showing different fields based on selected operation\\n\\n\\n#### Next Step \\n\\nNow we just touched the surface of the rule driven UI development and looked at other ways how web application can be \\nbuilt. \\n\\n* To understand how this works please jump to the [next topic][2] where we extend this application and give you \\ndeeper introduction to the MetaUI.\\n\\n* Or you can read [High level fundamentals][3] that are behind this framework. \\n    \\n [1]: http://localhost:4200\\n [2]: https://github.com/ngx-meta/rules/blob/master/docs/OSSRules.md\\n [3]: https://github.com/ngx-meta/rules/blob/master/docs/metaui-architecture.md\\n \\n     \\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GettingStartedComponent } from './getting-started.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GettingStartedComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GettingStartedRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-oss-rules',\n  template: `<app-markdown [mdFile]=\"mdFile\"></app-markdown>`\n})\nexport class GettingStartedComponent {\n  mdFile: string = require('!!raw-loader!./getting-started.doc.md');\n\n  constructor() {\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GettingStartedRoutingModule } from './getting-started-routing.module';\nimport { GettingStartedComponent } from './getting-started.component';\nimport { MarkdownModule } from '../../layout/markdown/markdown.module';\n\n@NgModule({\n  declarations: [\n    GettingStartedComponent\n  ],\n  imports: [\n    CommonModule,\n    GettingStartedRoutingModule,\n    MarkdownModule\n  ],\n})\nexport class GettingStartedModule { }\n"],"sourceRoot":""}